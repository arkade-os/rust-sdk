name: Core E2E Tests with Nigiri

on:
  workflow_call:
    inputs:
      arkd-version:
        description: 'Version of arkd to test against (git tag, version, hash)'
        required: true
        type: string

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  ARK_GO_DIR: ./ark-go
  ARKD_DIR: ./ark-go/ark
  ARKD_WALLET_DIR: ./ark-go/ark/pkg/ark-wallet
  ARK_LIVE_STORE_TYPE: inmemory
  ARK_DB_TYPE: sqlite
  ARK_EVENT_DB_TYPE: badger
  ARK_VTXO_MIN_AMOUNT: 1

jobs:
  build-tests:
    runs-on: ubuntu-latest
    outputs:
      test-binaries: ${{ steps.find-binaries.outputs.binaries }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "e2e_tests"

      - name: Build test binaries
        run: cargo test -p e2e-tests --no-run

      - name: Find test binaries
        id: find-binaries
        run: |
          BINARIES=$(find target/debug/deps -type f -executable -name "e2e_*" | jq -R -s -c 'split("\n")[:-1]')
          echo "binaries=$BINARIES" >> $GITHUB_OUTPUT
          echo "Found test binaries: $BINARIES"

      - name: Upload test binaries
        uses: actions/upload-artifact@v4
        with:
          name: test-binaries_${{ inputs.arkd-version }}
          path: target/debug/deps/e2e_*
          retention-days: 1
          overwrite: true

  run-tests:
    needs: build-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-binary: ${{ fromJson(needs.build-tests.outputs.test-binaries) }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: extractions/setup-just@v2

      - name: Download test binaries
        uses: actions/download-artifact@v4
        with:
          name: test-binaries_${{ inputs.arkd-version }}
          path: target/debug/deps

      - name: Show downloaded binaries
        run: ls -la target/debug/deps/

      - name: Make binaries executable
        run: chmod +x target/debug/deps/e2e_*

      - name: Install Nigiri
        run: |
          curl https://getnigiri.vulpem.com | bash

      - name: Start Nigiri
        run: |
          nigiri start
          # Wait for Nigiri to be fully up
          sleep 15

      # TODO: CI could be optimized by moving this step into the prior step and share the build binaries
      - name: Checkout arkd `${{ inputs.arkd-version }}`
        run: |
          just arkd-checkout ${{ inputs.arkd-version }}

      - name: Set up Go for arkd
        uses: actions/setup-go@v4
        with:
          go-version: '>=1.23.1'

      - name: Run go work sync for arkd
        run: |
          cd $ARKD_DIR
          go work sync

      - name: Start redis
        run: |
          just arkd-redis-run

      - name: Build arkd
        run: |
          just arkd-build

      - name: Run arkd-wallet
        run: |
          just arkd-wallet-run

      - name: Run arkd
        run: |
          just arkd-run

      - name: Fund arkd
        run: |
          just arkd-fund 20
          # Wait for arkd to catch up with the chain
          sleep 10

      - name: Run Test Binary
        run: |
          test_name=$(basename ${{ matrix.test-binary }})
          echo "Running test: $test_name"
          ${{ matrix.test-binary }} --ignored --test-threads=1 --nocapture

      - name: Cleanup Nigiri
        if: always()
        run: nigiri stop --delete

      - name: Print arkd-wallet logs on failure
        if: failure()
        run: |
          if [ -f arkd-wallet.log ]; then
            echo "=== arkd-wallet.log contents ==="
            cat arkd-wallet.log
            echo "=== End of arkd-wallet.log ==="
          else
            echo "arkd-wallet.log file not found"
          fi

      - name: Print arkd logs on failure
        if: failure()
        run: |
          if [ -f arkd.log ]; then
            echo "=== arkd.log contents ==="
            cat arkd.log
            echo "=== End of arkd.log ==="
          else
            echo "arkd.log file not found"
          fi
