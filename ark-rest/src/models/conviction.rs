/*
 * Ark API
 *
 * Combined Ark Service and Indexer API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::Deserialize;
use serde::Serialize;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Conviction {
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    #[serde(rename = "crimeType", skip_serializing_if = "Option::is_none")]
    pub crime_type: Option<models::CrimeType>,
    /// 0 if never expires
    #[serde(rename = "expiresAt", skip_serializing_if = "Option::is_none")]
    pub expires_at: Option<i64>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "pardoned", skip_serializing_if = "Option::is_none")]
    pub pardoned: Option<bool>,
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(rename = "roundId", skip_serializing_if = "Option::is_none")]
    pub round_id: Option<String>,
    /// Only set for script convictions
    #[serde(rename = "script", skip_serializing_if = "Option::is_none")]
    pub script: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::ConvictionType>,
}

impl Conviction {
    pub fn new() -> Conviction {
        Conviction {
            created_at: None,
            crime_type: None,
            expires_at: None,
            id: None,
            pardoned: None,
            reason: None,
            round_id: None,
            script: None,
            r#type: None,
        }
    }
}
