/*
 * Ark API
 *
 * Combined Ark Service and Indexer API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::Deserialize;
use serde::Serialize;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntentInfo {
    #[serde(rename = "boardingInputs", skip_serializing_if = "Option::is_none")]
    pub boarding_inputs: Option<Vec<models::IntentInput>>,
    #[serde(
        rename = "cosignersPublicKeys",
        skip_serializing_if = "Option::is_none"
    )]
    pub cosigners_public_keys: Option<Vec<String>>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "inputs", skip_serializing_if = "Option::is_none")]
    pub inputs: Option<Vec<models::IntentInput>>,
    #[serde(rename = "intent", skip_serializing_if = "Option::is_none")]
    pub intent: Option<models::Intent>,
    #[serde(rename = "receivers", skip_serializing_if = "Option::is_none")]
    pub receivers: Option<Vec<models::Output>>,
}

impl IntentInfo {
    pub fn new() -> IntentInfo {
        IntentInfo {
            boarding_inputs: None,
            cosigners_public_keys: None,
            created_at: None,
            id: None,
            inputs: None,
            intent: None,
            receivers: None,
        }
    }
}
