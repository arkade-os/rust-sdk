/*
 * Ark API
 *
 * Combined Ark Service and Indexer API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::Deserialize;
use serde::Serialize;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduledSessionConfig {
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i64>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<i64>,
    #[serde(rename = "fees", skip_serializing_if = "Option::is_none")]
    pub fees: Option<models::FeeInfo>,
    #[serde(rename = "period", skip_serializing_if = "Option::is_none")]
    pub period: Option<i64>,
    #[serde(
        rename = "roundMaxParticipantsCount",
        skip_serializing_if = "Option::is_none"
    )]
    pub round_max_participants_count: Option<i64>,
    #[serde(
        rename = "roundMinParticipantsCount",
        skip_serializing_if = "Option::is_none"
    )]
    pub round_min_participants_count: Option<i64>,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<i64>,
}

impl ScheduledSessionConfig {
    pub fn new() -> ScheduledSessionConfig {
        ScheduledSessionConfig {
            duration: None,
            end_time: None,
            fees: None,
            period: None,
            round_max_participants_count: None,
            round_min_participants_count: None,
            start_time: None,
        }
    }
}
