/*
 * Ark API
 *
 * Combined Ark Service, Indexer, Admin, Signer Manager, and Wallet API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::Deserialize;
use serde::Serialize;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TreeTxEvent {
    #[serde(rename = "batchIndex", skip_serializing_if = "Option::is_none")]
    pub batch_index: Option<i32>,
    /// output index -> child txid
    #[serde(rename = "children", skip_serializing_if = "Option::is_none")]
    pub children: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "topic", skip_serializing_if = "Option::is_none")]
    pub topic: Option<Vec<String>>,
    #[serde(rename = "tx", skip_serializing_if = "Option::is_none")]
    pub tx: Option<String>,
    #[serde(rename = "txid", skip_serializing_if = "Option::is_none")]
    pub txid: Option<String>,
}

impl TreeTxEvent {
    pub fn new() -> TreeTxEvent {
        TreeTxEvent {
            batch_index: None,
            children: None,
            id: None,
            topic: None,
            tx: None,
            txid: None,
        }
    }
}
