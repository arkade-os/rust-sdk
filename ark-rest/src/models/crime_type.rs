/*
 * Ark API
 *
 * Combined Ark Service and Indexer API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::Deserialize;
use serde::Serialize;

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CrimeType {
    #[serde(rename = "CRIME_TYPE_UNSPECIFIED")]
    CrimeTypeUnspecified,
    #[serde(rename = "CRIME_TYPE_MUSIG2_NONCE_SUBMISSION")]
    CrimeTypeMusig2NonceSubmission,
    #[serde(rename = "CRIME_TYPE_MUSIG2_SIGNATURE_SUBMISSION")]
    CrimeTypeMusig2SignatureSubmission,
    #[serde(rename = "CRIME_TYPE_MUSIG2_INVALID_SIGNATURE")]
    CrimeTypeMusig2InvalidSignature,
    #[serde(rename = "CRIME_TYPE_FORFEIT_SUBMISSION")]
    CrimeTypeForfeitSubmission,
    #[serde(rename = "CRIME_TYPE_FORFEIT_INVALID_SIGNATURE")]
    CrimeTypeForfeitInvalidSignature,
    #[serde(rename = "CRIME_TYPE_BOARDING_INPUT_SUBMISSION")]
    CrimeTypeBoardingInputSubmission,
    #[serde(rename = "CRIME_TYPE_MANUAL_BAN")]
    CrimeTypeManualBan,
}

impl std::fmt::Display for CrimeType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::CrimeTypeUnspecified => write!(f, "CRIME_TYPE_UNSPECIFIED"),
            Self::CrimeTypeMusig2NonceSubmission => write!(f, "CRIME_TYPE_MUSIG2_NONCE_SUBMISSION"),
            Self::CrimeTypeMusig2SignatureSubmission => {
                write!(f, "CRIME_TYPE_MUSIG2_SIGNATURE_SUBMISSION")
            }
            Self::CrimeTypeMusig2InvalidSignature => {
                write!(f, "CRIME_TYPE_MUSIG2_INVALID_SIGNATURE")
            }
            Self::CrimeTypeForfeitSubmission => write!(f, "CRIME_TYPE_FORFEIT_SUBMISSION"),
            Self::CrimeTypeForfeitInvalidSignature => {
                write!(f, "CRIME_TYPE_FORFEIT_INVALID_SIGNATURE")
            }
            Self::CrimeTypeBoardingInputSubmission => {
                write!(f, "CRIME_TYPE_BOARDING_INPUT_SUBMISSION")
            }
            Self::CrimeTypeManualBan => write!(f, "CRIME_TYPE_MANUAL_BAN"),
        }
    }
}

impl Default for CrimeType {
    fn default() -> CrimeType {
        Self::CrimeTypeUnspecified
    }
}
